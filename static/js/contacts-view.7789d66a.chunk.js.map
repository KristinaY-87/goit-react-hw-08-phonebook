{"version":3,"sources":["component/ContactList/ContactList.module.css","component/ContactForm/ContactForm.module.css","component/Filter/Filter.module.css","component/Section/Section.module.css","redux/operations.js","redux/contacts-selectors.js","component/ContactList/ContactList.js","component/ContactForm/ContactForm.js","component/Filter/Filter.js","component/Section/Section.js","views/ContactsView.js"],"names":["module","exports","contact","dispatch","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getLoading","state","contacts","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","connect","onDeleteContacts","operations","className","styles","title","list","map","number","item","text","btn","type","onClick","ContactForm","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","find","alert","reset","form","this","label","onChange","input","pattern","required","Component","contactsActions","currentTarget","Section","children","section","ContactsView","fetchContacts","isLoadingContacts"],"mappings":"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","file":"static/js/contacts-view.7789d66a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactList_title__28Og8\",\"list\":\"ContactList_list__3IEoI\",\"item\":\"ContactList_item__1Hu-2\",\"text\":\"ContactList_text__1lsSv\",\"btn\":\"ContactList_btn__1aJFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2HKq9\",\"label\":\"ContactForm_label__VfChj\",\"input\":\"ContactForm_input__16DDu\",\"btn\":\"ContactForm_btn__2xoU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__Exral\",\"input\":\"Filter_input__wT8Ww\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__35Bgx\",\"title\":\"Section_title__1xhbu\"};","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\n// ----async-----\n// const fetchContacts = () => async dispatch => {\n//     dispatch(fetchContactsRequest());\n\n//     try {\n//         const { data } = await axios.get('/contacts');\n//         dispatch(fetchContactsSuccess(data));\n//     } catch (error) {\n//         dispatch(fetchContactsError(error));\n//     }\n// }\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error.message)));\n};\n\nconst addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nexport default {\n  addContact,\n  deleteContact,\n  fetchContacts,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getAllContacts = state => state.contacts.items;\n\n// export const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n// return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport operations from '../../redux/operations';\nimport styles from './ContactList.module.css';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\n\nconst ContactList = ({ contacts, onDeleteContacts }) => (\n  <>\n    <h2 className={styles.title}>Contacts</h2>\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={styles.item} key={id}>\n          <span className={styles.text}>\n            {name}: {number}\n          </span>\n\n          <button\n            className={styles.btn}\n            type=\"button\"\n            onClick={() => onDeleteContacts(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(operations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport operations from '../../redux/operations';\nimport { getAllContacts } from '../../redux/contacts-selectors';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n  handleChange = e => {\n    // console.log(e);\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { contacts, onSubmit } = this.props;\n    const { name, number } = this.state;\n\n    contacts.find(contact => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : contacts.find(contact => contact.number === number)\n      ? alert(`${number} is already in contacts`)\n      : onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        <form className={styles.form} onSubmit={this.handleSubmit}>\n          <label className={styles.label}>\n            Name\n            <input\n              value={this.state.name}\n              onChange={this.handleChange}\n              type=\"text\"\n              name=\"name\"\n              className={styles.input}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label className={styles.label}>\n            Number\n            <input\n              value={this.state.number}\n              onChange={this.handleChange}\n              type=\"tel\"\n              name=\"number\"\n              className={styles.input}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button className={styles.btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => {\n    return dispatch(operations.addContact(name, number));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts-actions';\nimport { getFilter } from '../../redux/contacts-selectors';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.label}>\n    Find contacts by name\n    <input\n      className={styles.input}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section className={styles.section}>\n    <h2 className={styles.title}>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactList from '../component/ContactList';\nimport ContactForm from '../component/ContactForm';\nimport Filter from '../component/Filter';\nimport Section from '../component/Section';\nimport operations from '../redux/operations';\nimport { getLoading } from '../redux/contacts-selectors';\n\n// import AppBar from './component/AppBar';\n// import RegisterView from './views/RegisterView';\n// import LoginView from './views/LoginView'\n// import HomeView from './views/HomeView';\n\nclass ContactsView extends Component {\n  static propTypes = {\n    contacts: PropTypes.array,\n    filter: PropTypes.string,\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <ContactForm />\n          {this.props.isLoadingContacts && <h1>download...</h1>}\n          <Filter />\n          <ContactList />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}